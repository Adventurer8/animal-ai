library(ggplot2)
df1 <- data.frame(global_step, episode_mean)
df2 <- data.frame(global_step_2, episode_mean)
library(ggplot2)
library(ggplot2)
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
library(ggplot2)
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
data2 <- read.csv("MMB PPO Train/rew_rollout.csv")
global_step <- data1[,2]
global_step_2 <- data2[,2]
episode_mean <- data1[,3]
episode_mean_2 <- data2[,3]
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
PPO <- data.frame(global_step_2, episode_mean_2)
PPO <- data.frame(global_step_2, episode_mean_2)
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
data2 <- read.csv("MMB PPO Train/rew_rollout.csv")
global_step <- data1[,2]
global_step_2 <- data2[,2]
setwd("~/MSc/VU AI/Year 3/Thesis/LCFI/Animal AI/animal-ai/tensorboard")
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
data2 <- read.csv("MMB PPO Train/rew_rollout.csv")
global_step <- data1[,2]
global_step_2 <- data2[,2]
episode_mean <- data1[,3]
episode_mean_2 <- data2[,3]
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
LSTM$source <- "LSTM"
PPO$source <- "PPO"
colnames(df2) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Training Graph Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_point(size = 2, alpha = 0.7) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Memory Task Training") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
P
colnames(df2) <- c("global_step", "episode_mean")
colnames(PPO) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
colnames(PPO) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
colnames(LSTM) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
# plot grppois()# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Training Graph Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_point(size = 2, alpha = 0.7) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Memory Task Training") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
global_step <- data1[,2]
global_step_2 <- data2[,2]
View(data1)
global_step <- data1[,1]
View(data2)
global_step_2 <- data2[,2]
episode_mean <- data1[,5]
episode_mean_2 <- data2[,3]
View(data1)
View(data1)
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
LSTM$source <- "LSTM"
PPO$source <- "PPO"
colnames(PPO) <- c("global_step", "episode_mean")
colnames(LSTM) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
# plot grppois()# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Training Graph Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
library(ggplot2)
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_point(size = 2, alpha = 0.7) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Memory Task Training") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
View(df)
View(LSTM)
View(PPO)
library(ggplot2)
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
data2 <- read.csv("MMB PPO Train/rew_rollout.csv")
global_step <- data1[,1]
global_step_2 <- data2[,2]
episode_mean <- data1[,5]
episode_mean_2 <- data2[,3]
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
LSTM$source <- "LSTM"
PPO$source <- "PPO"
colnames(PPO) <- c("global_step", "episode_mean")
colnames(LSTM) <- c("global_step", "episode_mean")
df <- rbind(LSTM, PPO)
# plot grppois()# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Training Graph Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold",hjust=0.5))
library(ggplot2)
data1 <- read.csv("OCC LSTM Train/OCC_L_RecurrentPPO_0.csv")
data2 <- read.csv("OCC PPO Train/OCC_PPO_0.csv")
global_step <- data1[,2]
global_step_2 <- data2[,2]
episode_mean <- data1[,3]
episode_mean_2 <- data2[,3]
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
LSTM$source <- "LSTM"
PPO$source <- "PPO"
colnames(PPO) <- c("global_step", "episode_mean", "source")
df <- rbind(LSTM, PPO)
# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Complex Task") +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Arena Task") +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold", hjust = 0.5))
library(ggplot2)
data1 <- read.csv("MMB LSTM Train/rew_rollout.csv")
data2 <- read.csv("MMB PPO Train/rew_rollout.csv")
global_step <- data1[,1]
global_step_2 <- data2[,2]
episode_mean <- data1[,5]
episode_mean_2 <- data2[,3]
LSTM <- data.frame(global_step, episode_mean)
PPO <- data.frame(global_step_2, episode_mean_2)
LSTM$source <- "LSTM"
PPO$source <- "PPO"
colnames(PPO) <- c("global_step", "episode_mean", "source")
df <- rbind(LSTM, PPO)
# plot grppois()# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Training Graph Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold",hjust=0.5))
# plot grppois()# plot graph using ggplot2
ggplot(df, aes(x = global_step, y = episode_mean, color = source)) +
geom_smooth(method = "auto",size=2) +
labs(x = "Global Step", y = "Episode Mean Reward",
title = "Moving Ball Task") +
scale_x_continuous(limits = c(512, 2500000), breaks = seq(0, 2500000, by = 500000),
labels = scales::comma) +
scale_color_manual(values = c("#c260e2", "#6080e2")) +
guides(color = guide_legend(title = "Test")) +
theme_classic() +
theme(axis.line = element_line(size = 0.5, color = "black"),
axis.title = element_text(size = 14, face = "bold"),
axis.text = element_text(size = 12),
legend.position = "bottom",
legend.title = element_blank(),
legend.text = element_text(size = 12),
panel.grid.major = element_line(size = 0.2),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
panel.border = element_blank(),
plot.background = element_blank(),
plot.title = element_text(size = 14, face = "bold",hjust=0.5))
View(df)
library(ggplot2)
# Read in the train and test CSV files
train_data <- read.csv("arena-train_results.csv", header = TRUE, stringsAsFactors = FALSE)
test_data <- read.csv("arena_test_results.csv")
# Extract the lists of 100 values from each file
train_values <- train_data[1, 1]
train_values <- strsplit(train_values, ",")[[1]]
train_values <- gsub("\\[|\\]", "", train_values)
train_values <- as.numeric(train_values)
setwd("~/MSc/VU AI/Year 3/Thesis/LCFI/Animal AI/animal-ai/testing data")
library(ggplot2)
# Read in the train and test CSV files
train_data <- read.csv("arena-train_results.csv", header = TRUE, stringsAsFactors = FALSE)
test_data <- read.csv("arena_test_results.csv")
# Extract the lists of 100 values from each file
train_values <- train_data[1, 1]
train_values <- strsplit(train_values, ",")[[1]]
train_values <- gsub("\\[|\\]", "", train_values)
train_values <- as.numeric(train_values)
test_values <- test_data[1, 1]
test_values <- strsplit(test_values, ",")[[1]]
test_values <- gsub("\\[|\\]", "", test_values)
test_values <- as.numeric(test_values)
# Calculate the mean and standard deviation of each list
train_mean <- mean(train_values)
test_mean <- mean(test_values)
train_sd <- sd(train_values)
test_sd <- sd(test_values)
ci <- t.test(train_values, conf.level = 0.95)$conf.int
ci <- t.test(test_values, conf.level = 0.95)$conf.int
print(ci)
# Create a data frame for plotting
plot_data <- data.frame(
group = c("Train", "Test"),
mean = c(train_mean, test_mean),
ymin = c(train_mean - 1.96 * train_sd / sqrt(length(train_values)),
test_mean - 1.96 * test_sd / sqrt(length(test_values))),
ymax = c(train_mean + 1.96 * train_sd / sqrt(length(train_values)),
test_mean + 1.96 * test_sd / sqrt(length(test_values)))
)
# Create the plot
ggplot(plot_data, aes(x = group, y = mean)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) +
geom_point(size = 3, shape = 21, fill = "white") +
geom_line(size = 1, linetype = "dashed") +
labs(x = "", y = "Mean") +
theme_classic()
# Add t-distribution intervals to the data frame
plot_data$ymin_t <- qt(0.025, df = length(train_values) - 1) * train_sd / sqrt(length(train_values))
plot_data$ymax_t <- qt(0.975, df = length(train_values) - 1) * train_sd / sqrt(length(train_values))
# Create the plot with t-distribution intervals
ggplot(plot_data, aes(x = group, y = mean)) +
geom_errorbar(aes(ymin = ymin, ymax = ymax), width = 0.2) +
geom_errorbar(aes(ymin = mean + ymin_t, ymax = mean + ymax_t), width = 0.2, color = "red") +
geom_point(size = 3, shape = 21, fill = "white") +
geom_line(size = 1, linetype = "dashed") +
labs(x = "", y = "Mean") +
theme_classic()
welch_ttest <- t.test(train_values, test_values, var.equal = FALSE)
welch_ci <- welch_ttest$conf.int
welch_pvalue <- welch_ttest$p.value
print(welch_ci)
print(welch_pvalue)
